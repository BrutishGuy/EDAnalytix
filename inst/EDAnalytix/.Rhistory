load("~/R/Trelleborg Case - Latest/factors_retained.RData")
load("~/R/Trelleborg Case - Latest/feb22.RData")
load("~/R/Trelleborg Case - Latest/trel_model.RData")
load("~/R/Trelleborg Case - Latest/.RData")
library(mlr)
library(xgboost)
library(readr)
lidata <- read_csv("model_data_orig.csv")
data_to_model <- read_csv("model_data.csv")
load("factors_retained.RData")
load("trel_model.RData")
fix_to_predict <- function(x){
if(!x[['Sub_Group_Cde']] %in% factor_lvls[["Sub_Groups"]]) x[['Sub_Group_Cde']] <- "Other"
x["Item_Id2"] <- as.numeric(substr(x[['Item_Long_Nbr']], 7, 9))
x <- x[!names(x) %in% c("Quote_Nbr")]
x['Sub_Group_Cde'] <- as.numeric(factor(x['Sub_Group_Cde'], levels = factor_lvls[["Sub_Groups"]]))
x['Compound_Cde'] <- as.numeric(factor(x['Compound_Cde'], levels = factor_lvls[["Compounds"]]))
x['Stock_Class_Cde'] <- as.numeric(factor(x['Stock_Class_Cde'], levels = factor_lvls[["Stock_Classes"]]))
#x['Price_Range_Desc'] <- as.numeric(factor(x['Price_Range_Desc'], levels = factor_lvls[["Price_Range"]]))
return(x)
}
insert_price <- function(price, x){
x['Price_Unit_Amt'] <- price
if(price < x[['Low_Price_Unit_Amt']]){
x['Price_Range_Desc'] <- "2 - Below low price"
}else if(price < x[['Avg_Price_Unit_Amt']]){
x['Price_Range_Desc'] <- "3 - Below average price"
}else if(price < x[['High_Price_Unit_Amt']]){
x['Price_Range_Desc'] <- "4 - Below high price"
}else if(price >= x[['High_Price_Unit_Amt']] &
x[['High_Price_Unit_Amt']] != 0){
x$Price_Range_Desc <- "5 - Equal or above high price"
}
x['Price_Range_Desc'] <- as.numeric(factor(x['Price_Range_Desc'], levels = factor_lvls[["Price_Range"]]))
x['Prop_to_Low_Price'] <- price/x['Low_Price_Unit_Amt']
x['Prop_to_Avg_Price'] <- price/x['Avg_Price_Unit_Amt']
x['Prop_to_High_Price'] <- price/x['High_Price_Unit_Amt']
# x <- x[!names(x) %in% c("Successful")]
return(x)
}
x2 <- fix_to_predict(x)
x3 <- insert_price(0.4, x2)
data_fixed <- adply(data, 1, fix_to_predict)
data_fixed <- data_fixed[!names(data_fixed) %in% c("Quote_Nbr","Item_Long_Nbr", "Successful")]
price_ranges_by_item <- data %>%
group_by(Item_Long_Nbr) %>%
summarise(minp = min(Low_Price_Unit_Amt)*0.8,
maxp = max(High_Price_Unit_Amt)*1.2)
data2 <- merge(data, price_ranges_by_item)
data_to_predict <- NULL
for(i in 1:nrow(data2)){
df <- fix_to_predict(data2[i,])
df <- df[!names(df)%in%c("Quote_Nbr", "minp", "maxp")]
print(i)
prange = seq(from = data2$minp[i],
to = data2$maxp[i], length.out = 5)
for(j in 1:length(prange)){
temp <- insert_price(prange[j], df)
data_to_predict <- rbind(data_to_predict, temp)
}
}
preds <- predict(xgmodel, newdata = data_to_predict)
preds_out <- preds$data
preds_out$price <- data_to_predict$Price_Unit_Amt
preds_out$Item_Id <- data_to_predict$Item_Long_Nbr
compounds <- strsplit(preds_out$Item_Id, split = "-")
compounds <- sapply(compounds, function(x) x[2])
preds_out$Compounds <- compounds
prediction_var <- preds_out %>%
group_by(Item_Id)%>%
summarise(Prob_sd = sd(prob.1),
count = n())
selected_item <- preds_out %>%
filter(Item_Id == "PT0301100-T46N")
smooth_probability <- function(x, k = 2) {
x_new <- exp(x) / (exp(x) + exp(1 - x))
x_new = (x + k*x_new) / (k + 1)
return(x_new)
}
selected_item$prob.1 <- smooth_probability(selected_item$prob.1)
selected_item$prob.0 <- 1- selected_item$prob.1
selected_item_bar <- selected_item %>%
group_by(price) %>%
summarise(prob = mean(prob.1))
library(plotly)
p <- plot_ly(data = selected_item, x=~price, y=~prob.1,
type = "box")
p
p2 <- plot_ly(data = selected_item_bar, x=~price, y=~prob,
type = "bar")
p2
library(shiny); source('R/Trelleborg Case/herp.R')
install.packages("ggvis")
source('R/Trelleborg Case/herp.R')
install.packages("ggvis")
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
shiny::runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
shiny::runApp('GitHub/ExploreAnalytix/inst/EDAnalytix')
